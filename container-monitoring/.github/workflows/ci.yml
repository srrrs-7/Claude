name: Container Monitoring CI

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy, rustfmt
      
      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
      
      - name: Check code format
        run: cargo fmt --all -- --check
      
      - name: Clippy
        run: cargo clippy -- -D warnings

  test:
    name: Test
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
      
      - name: Run tests
        run: cargo test --all-features
        
      - name: Check for docker socket
        id: docker-check
        run: |
          if [ -e /var/run/docker.sock ]; then
            echo "DOCKER_AVAILABLE=true" >> $GITHUB_ENV
          else
            echo "DOCKER_AVAILABLE=false" >> $GITHUB_ENV
          fi
      
      - name: Run integration tests (if Docker available)
        if: env.DOCKER_AVAILABLE == 'true'
        run: cargo test --test '*' -- --ignored

  security_audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Install cargo-audit
        run: cargo install cargo-audit
      
      - name: Run security audit
        run: cargo audit

  build:
    name: Build
    needs: [test, security_audit]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
      
      - name: Build release
        run: cargo build --release
      
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: container-monitoring
          path: target/release/container-monitoring

  docker:
    name: Docker Build
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Build Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: false
          tags: container-monitoring:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
